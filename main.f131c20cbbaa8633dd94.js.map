{"version":3,"sources":["webpack:///./index.js"],"names":["selector","targetDate","this","Date","title","document","querySelector","days","hours","minutes","seconds","labels","querySelectorAll","interval","newStringMarkUp","startPage","insertAdjacentHTML","updateClockFace","start","setInterval","stop","clearInterval","pad","value","String","padStart","getTimeComponents","time","day","Math","floor","hour","minute","second","deltaTime","now","textContent"],"mappings":"6jCAkHc,I,WAtEZ,cAAsC,IAAxBA,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,WACtBC,KAAKD,WAAa,IAAIE,KAAKF,GAE3BC,KAAKE,MAAQC,SAASC,cAAc,QACpCJ,KAAKK,KAAOF,SAASC,cAAkBN,EAA3B,8BACZE,KAAKM,MAAQH,SAASC,cAAkBN,EAA3B,+BACbE,KAAKO,QAAUJ,SAASC,cAAkBN,EAA3B,8BACfE,KAAKQ,QAAUL,SAASC,cAAiBN,EAA1B,8BACfE,KAAKS,OAASN,SAASO,iBAAoBZ,EAA7B,WACdE,KAAKW,SAAW,K,2BAElBC,gBAAA,WACE,iC,EAGFC,UAAA,WACEb,KAAKE,MAAMY,mBAAmB,aAAcd,KAAKY,mBAG/CZ,KAAKe,mB,EAKVC,MAAA,WAAQ,WACLhB,KAAKa,YAELb,KAAKW,SAAWM,aAAY,WACxB,EAAKF,oBACN,M,EAGLG,KAAA,WACEC,cAAcnB,KAAKW,W,EAGrBS,IAAA,SAAIC,GACF,OAAOC,OAAOD,GAAOE,SAAS,EAAG,M,EAEnCC,kBAAA,SAAkBC,GAOhB,MAAO,CAAEC,IANG1B,KAAKoB,IAAIO,KAAKC,MAAMH,EAAO,QAMzBI,KAJZ7B,KAAKoB,IAAIO,KAAKC,MAAOH,EAAO,MAAR,OAIFK,OAHL9B,KAAKoB,IAAIO,KAAKC,MAAOH,EAAO,KAAR,MAGPM,OAFb/B,KAAKoB,IAAIO,KAAKC,MAAOH,EAAO,IAAe,Q,EAK9DV,gBAAA,WACI,IAGQiB,EAHQhC,KAAKD,WAELE,KAAKgC,MAEfR,EAAOzB,KAAKwB,kBAAkBQ,GAC9BA,GAAa,IACfhC,KAAKkB,OACLO,EAAO,CAAEC,IAAK,KAAMG,KAAM,KAAMC,OAAQ,KAAMC,OAAQ,OAGxD,IAXY,IAWZ,EAXY,EAUsBN,EAA9BC,EAVQ,EAURA,IAAKG,EAVG,EAUHA,KAAMC,EAVH,EAUGA,OAAQC,EAVX,EAUWA,OACvB,IAAoB/B,KAAKS,UAAzB,aAAiC,SAC/ByB,YAAc,GAElBlC,KAAKK,KAAK6B,YAAiBR,EAA3B,UACA1B,KAAKM,MAAM4B,YAAiBL,EAA5B,WACA7B,KAAKO,QAAQ2B,YAAiBJ,EAA9B,WACA9B,KAAKQ,QAAQ0B,YAAiBH,EAA9B,W,KAIU,CAAmB,CAC/BjC,SAAU,WACVC,WAAY,gBAGRiB,U","file":"main.f131c20cbbaa8633dd94.js","sourcesContent":["import './styles.css';\n\n// Вариант от ментора ////////////////////////////// не убирает слова days, hours, minutes, seconds\n\n// class CountdownTimer {\n//   constructor({ selector, targetDate }) {\n//     this.targetDate = new Date(targetDate);\n\n//     this.days = document.querySelector(`${selector} .value[data-value=\"days\"]`);\n//     this.hours = document.querySelector(`${selector} .value[data-value=\"hours\"]`);\n//     this.minutes = document.querySelector(`${selector} .value[data-value=\"mins\"]`);\n//     this.seconds = document.querySelector(`${selector} .value[data-value=\"secs\"]`);\n//   }\n//   init() {\n//     setInterval(() => this._countDown(), 1000)\n//   }\n//   _updateTime(totalSeconds) {\n//     this.days.textContent = Math.floor(totalSeconds / 3600 / 24);\n//     this.hours.textContent =\n//       this._formatTime(Math.floor((totalSeconds / 3600) % 24));\n//     this.minutes.textContent = this._formatTime(Math.floor((totalSeconds / 60) % 60));\n//     this.seconds.textContent = this._formatTime(Math.floor(totalSeconds % 60));\n//   }\n//   _countDown() {\n//     const currentDate = new Date();\n//     const totalSeconds = (this.targetDate - currentDate) / 1000;\n//     this._updateTime(totalSeconds)\n//   }\n//   _formatTime(time) {\n//     return time < 10 ? `0${time}` : time;\n//   }\n// }\n\n\n// const timer = new CountdownTimer({\n//   selector: '#timer-1',\n//   targetDate: '1 Jan 2021',\n// });\n\n// timer.init();\n\n// Мой вариант //////////////////////////////////////\n\nclass CountdownTimer {\n  constructor({ selector, targetDate }) {\n    this.targetDate = new Date(targetDate);\n\n    this.title = document.querySelector('body');\n    this.days = document.querySelector( `${selector} .value[data-value=\"days\"]`);\n    this.hours = document.querySelector( `${selector} .value[data-value=\"hours\"]`);\n    this.minutes = document.querySelector( `${selector} .value[data-value=\"mins\"]`);\n    this.seconds = document.querySelector(`${selector} .value[data-value=\"secs\"]`);\n    this.labels = document.querySelectorAll(`${selector} .label`);\n    this.interval = null;\n  }\n  newStringMarkUp() {\n    return `<p>Новый Год через:</p>`;\n  }\n\n  startPage() {\n    this.title.insertAdjacentHTML(\"afterbegin\", this.newStringMarkUp());\n\n\n      this.updateClockFace();\n    // const time = this.getTimeComponents(0);\n    // this.updateClockFace(time);\n  }\n\n start() {\n    this.startPage();\n\n    this.interval = setInterval(() => {\n        this.updateClockFace();\n    }, 1000);\n  }\n\n  stop() {\n    clearInterval(this.interval);\n  }\n\n  pad(value) {\n    return String(value).padStart(2, '0');\n  }\n  getTimeComponents(time) {\n    const day = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n    const hour =\n      this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n    const minute = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const second = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n    return { day, hour, minute, second };\n  }\n\nupdateClockFace() {\n    const endTime = this.targetDate;\n\nconst currentTime = Date.now();\n      const deltaTime = endTime - currentTime;\n      let time = this.getTimeComponents(deltaTime);\n      if (deltaTime <= 0) {\n        this.stop();\n        time = { day: '00', hour: '00', minute: '00', second: '00' };\n      }\n  const { day, hour, minute, second } = time;\n      for (const label of this.labels) {\n  label.textContent = \"\";\n  }\n    this.days.textContent = `${day} дней :`;\n    this.hours.textContent = `${hour} часов :`;\n    this.minutes.textContent = `${minute} минут :`;\n    this.seconds.textContent = `${second} секунд`;\n  }\n}\n\nconst timer = new CountdownTimer({\n  selector: '#timer-1',\n  targetDate: 'Jan 01 2021',\n});\n\ntimer.start();"],"sourceRoot":""}